<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入properties文件，此时就可以${属性名}的方式访问属性值-->
    <properties resource="jdbc.properties"></properties>
    <settings>
        <!--将表中字段的下划线自动转换为驼峰-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--开启延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
    <typeAliases>
        <!--typeAlias：设置某个具体的类型的别名
       属性：type：需要设置别名的类型的全类名   alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名-->
        <!-- <typeAlias type="pojo.User"></typeAlias>-->
        <!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写-->
        <package name="zzydx.pojo"/>
    </typeAliases>
    <!--设置分页插件-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>
    <!--environments可以配置多个连接数据库的环境
    default设置默认使用的环境的id-->
    <environments default="development">
        <!--environment：设置具体的连接数据库的环境信息
       属性：id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境-->
        <environment id="development">
            <!--transactionManager：设置事务管理方式
           属性：
               type：设置事务管理方式，type="JDBC|MANAGED"
               type="JDBC"：设置当前环境的事务管理都必须手动处理
               type="MANAGED"：设置事务被管理，例如spring中的AOP -->
            <transactionManager type="JDBC"/>
            <!--dataSource：设置数据源
           属性：
               type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"
               type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建
               type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建
               type="JNDI"：调用上下文中的数据源-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driverClassName}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <!--<mapper resource="mappers/UserMapper.xml"/>-->
        <!--以包为单位，将包下所有的映射文件引入核心配置文件：
          此方式必须保证mapper接口和mapper映射文件必须在相同的包下,路径名一致
          mapper接口要和mapper映射文件的名字一致-->
        <package name="mapper"/>
    </mappers>

</configuration>
